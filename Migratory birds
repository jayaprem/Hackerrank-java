https://www.hackerrank.com/challenges/migratory-birds/problem
Input:
11
1 2 3 4 5 4 3 2 1 3 4
Output:
4
1=1
2=2
3=3
4=3
5=1
value 3 is the highest frequency but 3 and 4 having the same freq.so choose the small one.
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the migratoryBirds function below.
    static int migratoryBirds(List<Integer> arr) {
HashSet<Integer> hs=new HashSet<Integer>(arr);
int max=0,c=0;
for(int i:hs)
{
    int t=Collections.frequency(arr,i);
    if(t>max)
    {
        max=t;
        c=i;
    }

}
return c;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
